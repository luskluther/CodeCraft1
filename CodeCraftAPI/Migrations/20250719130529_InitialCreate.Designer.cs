// <auto-generated />
using System;
using CodeCraftAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeCraftAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250719130529_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "dataStructures",
                            Code = "class TreeNode:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.children = []\r\n    \r\n    def add_child(self, child):\r\n        self.children.append(child)",
                            Description = "Trees are hierarchical data structures consisting of nodes connected by edges. Each tree has a root node at the top, and every other node has exactly one parent.",
                            Icon = "🌳",
                            Intro = "Hierarchical data structures with nodes connected by edges.",
                            Name = "Trees"
                        },
                        new
                        {
                            Id = 2,
                            Category = "dataStructures",
                            Code = "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None",
                            Description = "Linked lists are a linear data structure where elements are not stored in contiguous memory locations.",
                            Icon = "🔗",
                            Intro = "Linear collection of elements stored in nodes.",
                            Name = "Linked Lists"
                        },
                        new
                        {
                            Id = 3,
                            Category = "dataStructures",
                            Code = "class HashTable:\r\n    def __init__(self, size=10):\r\n        self.size = size\r\n        self.table = [[] for _ in range(size)]",
                            Description = "Hash tables use a hash function to compute an index into an array of buckets.",
                            Icon = "#️⃣",
                            Intro = "Key-value pairs for fast lookup.",
                            Name = "Hash Tables"
                        },
                        new
                        {
                            Id = 4,
                            Category = "dataStructures",
                            Code = "class Graph:\r\n    def __init__(self):\r\n        self.adjacency_list = {}",
                            Description = "Graphs are non-linear data structures consisting of vertices and edges.",
                            Icon = "🕸️",
                            Intro = "Networks of nodes and edges.",
                            Name = "Graphs"
                        },
                        new
                        {
                            Id = 5,
                            Category = "algorithms",
                            Code = "def quick_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    pivot = arr[len(arr) // 2]\r\n    return quick_sort([x for x in arr if x < pivot]) + [pivot] + quick_sort([x for x in arr if x > pivot])",
                            Description = "Sorting algorithms rearrange elements of a list or array in a certain order.",
                            Icon = "📊",
                            Intro = "Algorithms for ordering elements.",
                            Name = "Sorting"
                        },
                        new
                        {
                            Id = 6,
                            Category = "algorithms",
                            Code = "def binary_search(arr, target):\r\n    left, right = 0, len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    return -1",
                            Description = "Searching algorithms are used to find specific elements in a collection.",
                            Icon = "🔍",
                            Intro = "Algorithms for finding elements.",
                            Name = "Searching"
                        },
                        new
                        {
                            Id = 7,
                            Category = "algorithms",
                            Code = "def inorder_traversal(root):\r\n    if root:\r\n        inorder_traversal(root.left)\r\n        print(root.data)\r\n        inorder_traversal(root.right)",
                            Description = "Traversal algorithms visit each node in data structures.",
                            Icon = "🚶",
                            Intro = "Algorithms for visiting nodes systematically.",
                            Name = "Traversal"
                        },
                        new
                        {
                            Id = 8,
                            Category = "algorithms",
                            Code = "def fibonacci(n, memo={}):\r\n    if n in memo:\r\n        return memo[n]\r\n    if n <= 2:\r\n        return 1\r\n    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)\r\n    return memo[n]",
                            Description = "Dynamic programming solves complex problems by breaking them into simpler subproblems.",
                            Icon = "⚙️",
                            Intro = "Solving problems by breaking into subproblems.",
                            Name = "Dynamic Programming"
                        });
                });

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.UserProgress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.UserProgress", b =>
                {
                    b.HasOne("CodeCraftAPI.Models.Entities.Topic", "Topic")
                        .WithMany("UserProgress")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraftAPI.Models.Entities.User", "User")
                        .WithMany("Progress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.Topic", b =>
                {
                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("CodeCraftAPI.Models.Entities.User", b =>
                {
                    b.Navigation("Progress");
                });
#pragma warning restore 612, 618
        }
    }
}
